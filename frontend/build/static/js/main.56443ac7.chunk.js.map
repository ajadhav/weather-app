{"version":3,"sources":["apis/config.js","components/SearchBar.js","components/Cities.js","components/WeatherCardSkeleton.js","components/WeatherCard.js","App.js","index.js"],"names":["API_KEY","process","API_BASE_URL","request","_url","cancelToken","a","url","axios","params","units","getData","SearchBar","city","onChangeCity","className","autoFocus","type","value","autoComplete","onChange","id","placeholder","Cities","props","cityList","map","onClick","onSelection","WeatherCardSkeleton","style","borderRadius","class","src","alt","WeatherCard","weatherInfo","name","condition","dt","humidity","timezone","icon","temp","windspd","date","Date","formatted_temp","fahrenheit","unit","toFixed","format_temp","toLocaleDateString","toLocaleTimeString","fetchReducer","state","action","isLoading","isError","weatherData","payload","Error","query","dispatch","res","data","weather","main","wind","speed","console","error","isCancel","App","useState","selectedCity","setSelectedCity","setUnits","useReducer","useEffect","CancelToken","source","cancel","token","timeOutId","setTimeout","fetchWeatherData","clearTimeout","e","target","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.56443ac7.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport const API_KEY = process.env.REACT_APP_OPENWEATHER_API_KEY;\r\nexport const API_BASE_URL = 'https://api.openweathermap.org/data/2.5';\r\n\r\n// call current weather data for one location\r\n// by city name\r\n// by city ID\r\n// by geographic coordinates\r\n// by ZIP code\r\n\r\n// call current weather data for several cities\r\n// within rectangle zone\r\n// cities in circle\r\n\r\n// bulk downloading\r\n\r\nconst request = async (_url, cancelToken, method = 'GET', body = '') => {\r\n  const url = `${API_BASE_URL}${_url}&appid=${API_KEY}`;\r\n  // const response = await fetch(url);\r\n  // const { status, headers } = response;\r\n  // if (status === 204 || headers.get('Content-Length') === 0) {\r\n  //   return {};\r\n  // }\r\n  // return await response.json();\r\n  return await axios(url, {\r\n    params: {\r\n      units: 'imperial',\r\n    },\r\n    cancelToken,\r\n  });\r\n};\r\n\r\nexport const getData = (url, cancelToken) => request(url, cancelToken, 'GET');\r\n","import React from 'react';\r\n\r\nconst SearchBar = ({ city, onChangeCity }) => {\r\n  return (\r\n    <div className='input-group rounded my-3'>\r\n      <input\r\n        autoFocus\r\n        type='search'\r\n        value={city}\r\n        autoComplete='off'\r\n        onChange={onChangeCity}\r\n        id='form1'\r\n        className='form-control'\r\n        placeholder='City'\r\n        aria-label='Search'\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBar;\r\n","import React from 'react';\r\n\r\nconst Cities = (props) => {\r\n  const cityList = props.cityList.map((city) => (\r\n    <button\r\n      onClick={() => props.onSelection(city)}\r\n      className='btn btn-light my-1 mx-1'\r\n    >\r\n      {city}\r\n    </button>\r\n  ));\r\n  return (\r\n    <div className='my-3 d-flex flex-wrap justify-content-center align-items-stretch align-self-stretch'>\r\n      {cityList}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cities;\r\n","import React from 'react';\r\n\r\nconst WeatherCardSkeleton = () => {\r\n  return (\r\n    <div className='card' style={{ borderRadius: '1.25rem' }}>\r\n      <div className='card-body p-4'>\r\n        <div className='d-flex'>\r\n          <h6 className='placeholder-glow flex-grow-1'>\r\n            <span class='placeholder col-6'></span>\r\n          </h6>\r\n          <h6 className='placeholder-glow'>\r\n            <span class='placeholder col-6'></span>\r\n          </h6>\r\n        </div>\r\n\r\n        <div className='d-flex flex-column text-center mt-5 mb-4'>\r\n          <h6 className='placeholder-glow display-4 mb-0 font-weight-bold'>\r\n            <span class='placeholder col-6'></span>\r\n          </h6>\r\n          <span className='placeholder small'></span>\r\n        </div>\r\n\r\n        <div className='d-flex align-items-center'>\r\n          <div className='flex-grow-1'>\r\n            <div>\r\n              <i className='fas fa-wind fa-fw'></i>\r\n              <span className='placeholder ms-1'> </span>\r\n            </div>\r\n            <div>\r\n              <i className='fas fa-tint fa-fw'></i>\r\n              <span className='placeholder ms-1'></span>\r\n            </div>\r\n          </div>\r\n          <div>\r\n            <img src='' alt=''></img>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherCardSkeleton;\r\n","import React from 'react';\r\n\r\nconst WeatherCard = ({ weatherInfo, units }) => {\r\n  const { name, condition, dt, timezone, humidity, icon, temp, windspd } =\r\n    weatherInfo;\r\n  const date = new Date(dt * 1000);\r\n  const toCelsius = (fahrenheit) => {\r\n    return ((fahrenheit - 32) * 5) / 9;\r\n  };\r\n  const format_temp = (temp, units) => {\r\n    const unit = units === 'metric' ? '°C' : '°F';\r\n    const ftemp =\r\n      temp == null\r\n        ? temp\r\n        : units === 'metric'\r\n        ? toCelsius(temp).toFixed(1)\r\n        : temp.toFixed(1);\r\n    return ftemp + unit;\r\n  };\r\n  const formatted_temp = format_temp(temp, units);\r\n  return (\r\n    <div className='card' style={{ borderRadius: '1.25rem' }}>\r\n      <div className='card-body p-4'>\r\n        <div className='d-flex'>\r\n          <h6 className='flex-grow-1'>{name}</h6>\r\n          <h6>\r\n            {date.toLocaleDateString()} - {date.toLocaleTimeString()}\r\n          </h6>\r\n        </div>\r\n\r\n        <div className='d-flex flex-column text-center mt-5 mb-4'>\r\n          <h6 className='display-4 mb-0 font-weight-bold'>{formatted_temp}</h6>\r\n          <span className='small'>{condition}</span>\r\n        </div>\r\n\r\n        <div className='d-flex align-items-center'>\r\n          <div className='flex-grow-1'>\r\n            <div>\r\n              <i className='fas fa-wind fa-fw'></i>\r\n              <span className='ms-1'> {windspd} km/h </span>\r\n            </div>\r\n            <div>\r\n              <i className='fas fa-tint fa-fw'></i>\r\n              <span className='ms-1'> {humidity}% </span>\r\n            </div>\r\n          </div>\r\n          <div>\r\n            <img\r\n              src={`https://openweathermap.org/img/wn/${icon}@2x.png`}\r\n              alt=''\r\n            ></img>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherCard;\r\n\r\n// const WeatherCard = ({\r\n//   city,\r\n//   condition,\r\n//   dt,\r\n//   humidity,\r\n//   icon,\r\n//   temp,\r\n//   windspd,\r\n// }) => {\r\n//   const date = new Date(dt);\r\n\r\n//   return (\r\n//     <div className='card'>\r\n//       <div className='card-body'>\r\n//         <p>\r\n//           {date.toLocaleDateString()}-{date.toLocaleTimeString()}\r\n//         </p>\r\n//         <p className='font-weight-bold'>{temp}°</p> <p>{condition}</p>\r\n//         <p>Humidity</p>\r\n//         <p>{humidity}</p>\r\n//         <p>Wind Speed</p>\r\n//         <p>{windspd}</p>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default WeatherCard;\r\n\r\n/* cityname\r\ndatetime\r\ntimezone\r\nicon,iconurl\r\ntemp\r\ncondition\r\nhumidity\r\nwind speed\r\n*/\r\n","import React, { useState, useEffect, useReducer } from 'react';\nimport axios from 'axios';\nimport { getData } from './apis/config';\nimport SearchBar from './components/SearchBar';\nimport Cities from './components/Cities';\nimport WeatherCardSkeleton from './components/WeatherCardSkeleton';\nimport WeatherCard from './components/WeatherCard';\nimport './App.css';\n//huehue\nfunction fetchReducer(state, action) {\n  switch (action.type) {\n    case 'FETCH_START':\n      return {\n        ...state,\n        isLoading: true,\n        isError: false,\n      };\n    case 'FETCH_SUCCESS':\n      return {\n        ...state,\n        isLoading: false,\n        isError: false,\n        weatherData: action.payload,\n      };\n    case 'FETCH_FAILURE':\n      return {\n        ...state,\n        isLoading: false,\n        isError: true,\n      };\n    case 'RESET':\n      return {\n        weatherData: {\n          name: '',\n          condition: '',\n          dt: null,\n          timezone: null,\n          humidity: null,\n          icon: '',\n          temp: null,\n          windspd: null,\n        },\n        isLoading: false,\n        isError: false,\n      };\n    default:\n      throw new Error();\n  }\n}\n\nasync function fetchWeatherData(query, dispatch, cancelToken) {\n  if (query) {\n    dispatch({ type: 'FETCH_START' });\n    try {\n      // console.log(query);\n      const res = await getData(`/weather?q=${query}`, cancelToken);\n      // console.log(res);\n      const weatherInfo = {\n        name: res.data.name,\n        condition: res.data.weather[0].main,\n        dt: res.data.dt,\n        timezone: res.data.timezone,\n        humidity: res.data.main.humidity,\n        icon: res.data.weather[0].icon,\n        temp: res.data.main.temp,\n        windspd: res.data.wind.speed,\n      };\n\n      dispatch({ type: 'FETCH_SUCCESS', payload: weatherInfo });\n      //setSelectedCity(res.name);\n    } catch (err) {\n      console.error(err);\n      axios.isCancel(err) || dispatch({ type: 'FETCH_FAILURE' });\n    }\n  }\n}\n\nconst App = () => {\n  //const defaultCity = () => window.localStorage.getItem('city');\n  //state: search->city->api->weather info\n  const cities = ['New York', 'Detroit', 'Chicago', 'Los Angeles', 'Seattle'];\n  const [selectedCity, setSelectedCity] = useState('');\n  const [units, setUnits] = useState('imperial');\n  const [{ weatherData, isError, isLoading }, dispatch] = useReducer(\n    fetchReducer,\n    {\n      weatherData: {\n        name: '',\n        condition: '',\n        dt: null,\n        timezone: null,\n        humidity: null,\n        icon: '',\n        temp: null,\n        windspd: null,\n      },\n      isLoading: false,\n      isError: false,\n    }\n  );\n  useEffect(() => {\n    const { cancel, token } = axios.CancelToken.source();\n    const timeOutId = setTimeout(\n      () => fetchWeatherData(selectedCity, dispatch, token),\n      500\n    );\n    return () => cancel('No longer latest query') || clearTimeout(timeOutId);\n  }, [selectedCity]);\n\n  return (\n    <div className='App'>\n      <div className='container py-5 h-100'>\n        <div className='row d-flex justify-content-center align-items-center h-100'>\n          <div className='position-relative col-md-8 col-lg-6 col-xl-4'>\n            <h1 className='text-center'>Weather App</h1>\n            <SearchBar\n              city={selectedCity}\n              onChangeCity={(e) => {\n                // console.log(e);\n                if (e.target.value === '') {\n                  dispatch({ type: 'RESET' });\n                }\n                setSelectedCity(e.target.value);\n              }}\n            />\n            <div className='my-3 d-flex flex-wrap justify-content-center align-items-stretch align-self-stretch'>\n              <button\n                onClick={() => {\n                  setUnits('imperial');\n                }}\n                className='btn btn-sm btn-light'\n              >\n                °F\n              </button>\n              <button\n                onClick={() => {\n                  setUnits('metric');\n                }}\n                className='btn btn-sm btn-dark'\n              >\n                °C\n              </button>\n            </div>\n            <Cities\n              cityList={cities}\n              onSelection={(e) => {\n                setSelectedCity(e);\n              }}\n            />\n            {isError && (\n              <div className='alert alert-danger'>\n                {selectedCity\n                  ? `We do not have information for ${selectedCity}, please enter another city`\n                  : 'Something went wrong...please enter another city'}\n              </div>\n            )}\n            {isLoading ? (\n              <WeatherCardSkeleton />\n            ) : selectedCity !== '' && !isError ? (\n              <WeatherCard units={units} weatherInfo={weatherData} />\n            ) : (\n              <div></div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}