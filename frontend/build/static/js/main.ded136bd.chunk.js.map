{"version":3,"sources":["components/weather.actions.js","components/weather.reducer.js","components/weather.context.js","components/Cities.js","components/ChartInst.js","components/Error.js","components/WeatherCardSkeleton.js","components/Header.js","components/WeatherCondition.js","components/WeatherHourly.js","components/Body.js","components/WeatherDaily.js","components/Footer.js","components/WeatherCard.js","utils.js","components/UnitToggle.js","components/Autocomplete.js","App.js","index.js"],"names":["LOAD_WEATHER","LOAD_WEATHER_SUCCESS","LOAD_WEATHER_ERROR","SET_UNITS","SET_LOCATION","weatherReducer","state","action","type","loading","error","weatherData","payload","lat","lon","name","timezone","timezone_offset","current","hourly","daily","units","selectedCity","selectedLat","selectedLon","Error","WeatherContext","createContext","WeatherProvider","children","useReducer","value","dispatch","Provider","useWeather","context","useContext","undefined","updateWeather","query","cancelToken","a","console","log","axios","get","params","res","weatherInfo","data","sunset","Date","toLocaleTimeString","timeStyle","sunrise","isCancel","myChart","Cities","props","cityList","map","city","onClick","e","onSelection","className","id","HeaderSkeleton","ConditionSkeleton","Array","keys","BodySkeleton","HourlyForecastItemSkeleton","HourlyForecastSkeleton","forecast","index","WeatherCardSkeleton","Header","dateTime","date","toLocaleDateString","ConditionItem","icon","ConditionList","defaults","humidity","wind_speed","Object","key","HourlyItem","hour","time","Intl","DateTimeFormat","hour12","format","dt","replace","weather","description","temp","src","process","alt","HourlyForecast","Chart","register","registerables","ChartInst","hourlyData","hourlyTemp","hourlyRain","rain","chartContainer","useRef","useEffect","cfg","datasets","label","yAxisID","fill","borderColor","tension","backgroundColor","labels","options","responsive","scales","TempAxis","position","grid","display","drawBorder","drawOnChartArea","title","text","RainAxis","ticks","min","plugins","tooltip","callbacks","dataset","datasetIndex","parsed","y","myChartRef","getContext","destroy","buildChart","ref","Body","feels_like","slice","DailyItem","day","dayofWeek","weekday","max","DailyForecast","Footer","href","role","WeatherCard","formattedData","unitMapper","pressure","dew_point","clouds","visibility","wind_gust","wind_deg","snow","convTemp","fahrenheit","toFixed","convSpd","spd","mph","reduce","acc","fromEntries","entries","k","v","formatData","style","borderRadius","UnitToggle","handleImperial","handleMetric","Autocomplete","changeLatLon","useState","suggestionIdx","suggestions","setState","CancelToken","source","cancel","token","timeOutId","setTimeout","getData","then","clearTimeout","changeCity","currentTarget","SearchBar","onChange","onKeyDown","placeholder","autoFocus","autoComplete","suggs","q","keyCode","length","suggestion","coord","country","toLowerCase","App","cities","initcities","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ded136bd.chunk.js","sourcesContent":["export const LOAD_WEATHER = '[Weather] LOAD_WEATHER';\r\nexport const LOAD_WEATHER_SUCCESS = '[Weather] LOAD_WEATHER_SUCCESS';\r\nexport const LOAD_WEATHER_ERROR = '[Weather] LOAD_WEATHER_ERROR';\r\nexport const RESET = '[Weather] RESET';\r\nexport const SET_UNITS = '[Weather] SET_UNITS';\r\nexport const SET_LOCATION = '[Weather] SET_LOCATION';\r\n","import {\r\n  LOAD_WEATHER,\r\n  LOAD_WEATHER_SUCCESS,\r\n  LOAD_WEATHER_ERROR,\r\n  RESET,\r\n  SET_UNITS,\r\n  SET_LOCATION,\r\n} from './weather.actions';\r\n\r\nexport const weatherReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case LOAD_WEATHER:\r\n      return { ...state, loading: true, error: false };\r\n    case LOAD_WEATHER_SUCCESS:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        error: false,\r\n        weatherData: action.payload,\r\n      };\r\n    case LOAD_WEATHER_ERROR:\r\n      return { ...state, loading: false, error: true };\r\n    case RESET:\r\n      return {\r\n        ...state,\r\n        weatherData: {\r\n          weatherData: {\r\n            lat: null,\r\n            lon: null,\r\n            name: '',\r\n            timezone: '',\r\n            timezone_offset: null,\r\n            current: null,\r\n            hourly: [],\r\n            daily: [],\r\n          },\r\n          loading: false,\r\n          error: false,\r\n          units: 'imperial',\r\n          selectedCity: '',\r\n          selectedLat: null,\r\n          selectedLon: null,\r\n        },\r\n        loading: false,\r\n        error: false,\r\n      };\r\n    case SET_UNITS:\r\n      return {\r\n        ...state,\r\n        units: action.payload,\r\n      };\r\n    case SET_LOCATION:\r\n      return {\r\n        ...state,\r\n        selectedCity: action.payload.name,\r\n        selectedLat: action.payload.lat,\r\n        selectedLon: action.payload.lon,\r\n      };\r\n    default:\r\n      throw new Error();\r\n  }\r\n};\r\n","import axios from 'axios';\r\nimport React, { createContext, useReducer, useContext } from 'react';\r\nimport { weatherReducer } from './weather.reducer';\r\nimport {\r\n  LOAD_WEATHER,\r\n  LOAD_WEATHER_ERROR,\r\n  LOAD_WEATHER_SUCCESS,\r\n  SET_LOCATION,\r\n} from './weather.actions';\r\nconst WeatherContext = createContext();\r\n\r\nexport const WeatherProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(weatherReducer, {\r\n    weatherData: {\r\n      lat: null,\r\n      lon: null,\r\n      name: '',\r\n      timezone: '',\r\n      timezone_offset: null,\r\n      current: null,\r\n      hourly: [],\r\n      daily: [],\r\n    },\r\n    loading: false,\r\n    error: false,\r\n    units: 'imperial',\r\n    selectedCity: '',\r\n    selectedLat: null,\r\n    selectedLon: null,\r\n  });\r\n  const value = { state, dispatch };\r\n  return (\r\n    <WeatherContext.Provider value={value}>{children}</WeatherContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useWeather = () => {\r\n  const context = useContext(WeatherContext);\r\n  if (context === undefined) {\r\n    throw new Error('useWeather must be used within a WeatherProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport async function updateWeather(query, dispatch, cancelToken) {\r\n  dispatch({ type: LOAD_WEATHER });\r\n  try {\r\n    console.log(query);\r\n    const res = await axios.get('/api/weather', { params: query }, cancelToken);\r\n    let weatherInfo = res.data;\r\n    //TODO clean this up\r\n    weatherInfo.current.name = query.name;\r\n    weatherInfo.current.sunset = new Date(\r\n      weatherInfo.current.sunset * 1000\r\n    ).toLocaleTimeString([], { timeStyle: 'short' });\r\n    weatherInfo.current.sunrise = new Date(\r\n      weatherInfo.current.sunrise * 1000\r\n    ).toLocaleTimeString([], { timeStyle: 'short' });\r\n    dispatch({ type: LOAD_WEATHER_SUCCESS, payload: weatherInfo });\r\n  } catch (err) {\r\n    console.error(err);\r\n    axios.isCancel(err) || dispatch({ type: LOAD_WEATHER_ERROR });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { useWeather, updateWeather } from './weather.context';\r\nimport { SET_LOCATION } from './weather.actions';\r\nconst Cities = (props) => {\r\n  const { dispatch } = useWeather();\r\n  const onSelection = (e) => {\r\n    const query = {\r\n      name: e.name,\r\n      lat: e.lat,\r\n      lon: e.lon,\r\n    };\r\n    dispatch({\r\n      type: SET_LOCATION,\r\n      payload: query,\r\n    });\r\n    updateWeather(query, dispatch, null);\r\n    // setSelectedCity(e.name);\r\n    // setSelectedCoord({ lat: e.coord.lat ?? null, lon: e.coord.lon ?? null });\r\n  };\r\n  const cityList = props.cityList.map((city) => (\r\n    <button\r\n      key={city.id}\r\n      onClick={() => onSelection(city)}\r\n      className='btn btn-light my-1 mx-1'\r\n    >\r\n      {city.name}\r\n    </button>\r\n  ));\r\n  return (\r\n    <div className='my-3 d-flex flex-wrap justify-content-center align-items-stretch align-self-stretch'>\r\n      {cityList}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cities;\r\n","import React, { useEffect, useRef } from 'react';\r\nimport { Chart, registerables } from 'chart.js';\r\nChart.register(...registerables);\r\nlet myChart;\r\n/*\r\n    hourly\r\n    dt\r\n    temp\r\n    description\r\n    windspd\r\n*/\r\n// const ChartInst = ({data}) => {\r\n//   const chartRef = useRef(null);\r\n//   useEffect(() => {\r\n//     if (chartRef.current) {\r\n//       const myChart = new Chart(chartRef.current, {\r\n//         type: 'bar',\r\n//         data: {\r\n//           labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],\r\n//           datasets: [\r\n//             {\r\n//               label: '# of Votes',\r\n//               data: [12, 19, 3, 5, 2, 3],\r\n//               backgroundColor: [\r\n//                 'rgba(255, 99, 132, 0.2)',\r\n//                 'rgba(54, 162, 235, 0.2)',\r\n//                 'rgba(255, 206, 86, 0.2)',\r\n//                 'rgba(75, 192, 192, 0.2)',\r\n//                 'rgba(153, 102, 255, 0.2)',\r\n//                 'rgba(255, 159, 64, 0.2)',\r\n//               ],\r\n//               borderColor: [\r\n//                 'rgba(255, 99, 132, 1)',\r\n//                 'rgba(54, 162, 235, 1)',\r\n//                 'rgba(255, 206, 86, 1)',\r\n//                 'rgba(75, 192, 192, 1)',\r\n//                 'rgba(153, 102, 255, 1)',\r\n//                 'rgba(255, 159, 64, 1)',\r\n//               ],\r\n//               borderWidth: 1,\r\n//             },\r\n//           ],\r\n//         },\r\n//         options: {\r\n//           scales: {\r\n//             yAxes: [\r\n//               {\r\n//                 ticks: {\r\n//                   beginAtZero: true,\r\n//                 },\r\n//               },\r\n//             ],\r\n//           },\r\n//         },\r\n//       });\r\n//     }\r\n//   }, []);\r\n//   return (\r\n//     <div>\r\n//       <canvas ref={chartRef} />\r\n//     </div>\r\n//   );\r\n// };\r\n\r\nconst ChartInst = ({ hourlyData }) => {\r\n  // const hourlyPOP = hourlyData?.map((hour) => hour.pop);\r\n  const hourlyTemp = hourlyData?.map((hour) => hour.temp);\r\n  const hourlyRain = hourlyData?.map((hour) => hour.rain && hour.rain['1h']);\r\n  const chartContainer = useRef(null);\r\n  // const [chartInstance, setChartInstance] = useState(null);\r\n  useEffect(() => {\r\n    const buildChart = () => {\r\n      const cfg = {\r\n        type: 'line',\r\n        data: {\r\n          datasets: [\r\n            {\r\n              type: 'line',\r\n              label: 'temp',\r\n              data: hourlyTemp,\r\n              yAxisID: 'TempAxis',\r\n              fill: false,\r\n              borderColor: 'rgb(0,158,115)',\r\n              tension: 0.4,\r\n            },\r\n            {\r\n              type: 'bar',\r\n              label: 'rain',\r\n              data: hourlyRain,\r\n              yAxisID: 'RainAxis',\r\n              // fill: true,\r\n              // borderColor: 'rgb(39,76,245)',\r\n              backgroundColor: 'rgba(39,76,245,0.3)',\r\n            },\r\n          ],\r\n          labels: hourlyData?.map((hour) => {\r\n            return new Intl.DateTimeFormat('en-US', {\r\n              hour: 'numeric',\r\n              hour12: true,\r\n            })\r\n              .format(new Date(hour?.dt * 1000))\r\n              .replace(/\\s+/g, '');\r\n          }),\r\n        },\r\n        options: {\r\n          responsive: true,\r\n          scales: {\r\n            TempAxis: {\r\n              id: 'TempAxis',\r\n              type: 'linear',\r\n              position: 'left',\r\n              grid: {\r\n                display: true,\r\n                drawBorder: false,\r\n                drawOnChartArea: false,\r\n              },\r\n              // suggestedMin: Math.min(...hourlyTemp),\r\n              // suggestedMax: Math.max(...hourlyTemp),\r\n              title: {\r\n                text: '°',\r\n              },\r\n              // scaleLabel: { display: true, labelString: '°' },\r\n            },\r\n            RainAxis: {\r\n              id: 'RainAxis',\r\n              position: 'right',\r\n              grid: {\r\n                display: false,\r\n                drawBorder: false,\r\n                drawOnChartArea: false,\r\n              },\r\n              ticks: {\r\n                display: false,\r\n                min: 0,\r\n              },\r\n              // scaleLabel: { display: true, labelString: 'mm' },\r\n            },\r\n          },\r\n          plugins: {\r\n            tooltip: {\r\n              callbacks: {\r\n                label: (context) => {\r\n                  let label = context.dataset.label || '';\r\n                  if (context.datasetIndex === 1 && context.parsed.y !== null) {\r\n                    label += ' ' + context.parsed.y + ' mm';\r\n                  } else if (\r\n                    context.datasetIndex === 0 &&\r\n                    context.parsed.y !== null\r\n                  ) {\r\n                    label += ' ' + context.parsed.y + '°';\r\n                  }\r\n                  return label;\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      };\r\n      const myChartRef = chartContainer.current.getContext('2d');\r\n      if (typeof myChart !== 'undefined') myChart.destroy();\r\n      myChart = new Chart(myChartRef, cfg);\r\n    };\r\n    buildChart();\r\n    return () => myChart.destroy();\r\n  }, [chartContainer, hourlyData]);\r\n  // const updateDataset = (datasetIndex, newData) => {\r\n  //   chartInstance.data.datasets[datasetIndex].data = newData;\r\n  //   chartInstance.update();\r\n  // };\r\n\r\n  return (\r\n    <div>\r\n      <canvas ref={chartContainer} />\r\n    </div>\r\n  );\r\n};\r\nexport default ChartInst;\r\n","import React from 'react';\r\nimport { useWeather } from './weather.context';\r\nconst Error = () => {\r\n  const {\r\n    state: { weatherData, error },\r\n  } = useWeather();\r\n  return (\r\n    <>\r\n      {error && (\r\n        <div className='alert alert-danger'>\r\n          {weatherData.name\r\n            ? `We do not have information for ${weatherData.name}, please enter another city`\r\n            : 'Something went wrong...please enter another city'}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default Error;\r\n","import React from 'react';\r\n\r\nconst HeaderSkeleton = () => {\r\n  return (\r\n    <div className='card-header row placeholder-glow d-flex justify-content-between g-0 p-4'>\r\n      <h4 className='card-title flex-grow-1  col-4'>\r\n        <span className='placeholder col-6'></span>\r\n      </h4>\r\n      <h6 className='col-4'>\r\n        <span className='placeholder col-12'></span>\r\n      </h6>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst ConditionSkeleton = () => {\r\n  return (\r\n    <div className='col-4'>\r\n      {[...Array(2).keys()].map((e) => {\r\n        return (\r\n          <div key={e}>\r\n            <i className='placeholder col-1'></i>\r\n            <span className='placeholder col-9'></span>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst BodySkeleton = () => {\r\n  return (\r\n    <div className='card-body row placeholder-glow g-0 p-4'>\r\n      <div className='text-center'>\r\n        <h6 className='display-4 font-weight-bold'>\r\n          <span className='placeholder col-6'></span>\r\n        </h6>\r\n        <p className='small px-5'>\r\n          <span className='placeholder col-6'></span>\r\n        </p>\r\n      </div>\r\n      <div className='d-flex justify-content-between align-items-center'>\r\n        <ConditionSkeleton />\r\n        <div className='display-4 col-4'>\r\n          <span className='placeholder col-12'></span>\r\n        </div>\r\n      </div>\r\n      <HourlyForecastSkeleton />\r\n    </div>\r\n  );\r\n};\r\n\r\n// const DailyForecastItem = ({ forecast }) => {\r\n//   const day = new Intl.DateTimeFormat('en-US', { weekday: 'long' })\r\n//     .format(new Date(forecast.dt * 1000))\r\n//     .substring(0, 3);\r\n//   const temp = { min: forecast.temp.min, max: forecast.temp.max };\r\n//   const icon = forecast.weather[0].icon;\r\n//   return (\r\n//     <div className='df__item flex-column text-center'>\r\n//       <p className='small mb-1'>{day}</p>\r\n//       <div className=' small mb-0'>\r\n//         <img\r\n//           className='img-fluid'\r\n//           src={`${process.env.PUBLIC_URL}/assets/icons/${icon}.png`}\r\n//           alt=''\r\n//         />\r\n//         <p className='small mb-0'>{temp.max}</p>\r\n//         <p className='small mb-0 text-muted'>{temp.min}</p>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\nconst HourlyForecastItemSkeleton = () => {\r\n  return (\r\n    <div className='df__item flex-column text-center'>\r\n      <h1>\r\n        <span className='placeholder col-12 placeholder-lg'></span>\r\n      </h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst HourlyForecastSkeleton = () => {\r\n  return (\r\n    <div className='d-flex justify-content-space-evenly align-items-center'>\r\n      {[...Array(7).keys()].map((forecast, index) => {\r\n        return <HourlyForecastItemSkeleton key={index} forecast={forecast} />;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\n// const FooterSkeleton = () => {\r\n//   return (\r\n//     <div className='card-footer row placeholder-glow g-0 p-4'>\r\n//       <HourlyForecastSkeleton />\r\n//     </div>\r\n//   );\r\n// };\r\n\r\nconst WeatherCardSkeleton = () => {\r\n  return (\r\n    <div className='card' aria-hidden='true'>\r\n      <HeaderSkeleton />\r\n      <BodySkeleton />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherCardSkeleton;\r\n","const Header = ({ name, dateTime }) => {\r\n  const date = new Date(dateTime * 1000);\r\n  // const fullDate = `${date.toLocaleDateString()} - ${date.toLocaleTimeString()}`;\r\n  return (\r\n    <div className='card-header row g-0 p-4'>\r\n      <div className='hstack gap-3'>\r\n        <div className='h3 card-title pe-5'>{name}</div>\r\n        <div className='vr'></div>\r\n        <div className='vstack px-5'>\r\n          <div className='h6 text-muted small'>{date.toLocaleDateString()}</div>\r\n          <div className='h6 text-muted small'> {date.toLocaleTimeString()}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","export const ConditionItem = ({ value, icon }) => {\r\n  return (\r\n    <div>\r\n      <i className={icon}></i>\r\n      <span>{value}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const ConditionList = ({ current }) => {\r\n  const defaults = {\r\n    sunrise: 'bi bi-sunrise fa-solid fa-fw',\r\n    sunset: 'bi bi-sunset fa-solid fa-fw',\r\n    humidity: 'fas fa-tint fa-fw',\r\n    wind_speed: 'fas fa-wind fa-fw',\r\n    // dew_point: 'fas fa-dewpoint',\r\n    // visibility: 'far fa-eye fa-fw',\r\n  };\r\n  const keys = Object.keys(defaults);\r\n  return (\r\n    <div className='flex-grow-1'>\r\n      {keys.map((key, index) => {\r\n        return (\r\n          <ConditionItem\r\n            key={index}\r\n            value={current && current[key]}\r\n            icon={defaults[key]}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\n// const ConditionList = ({ current }) => {\r\n//   const conds = {\r\n//     sunset: 'far fa-sunset fa-fw',\r\n//     sunrise: 'far fa-sunrise fa-fw',\r\n//     humidity: 'fas fa-tint fa-fw',\r\n//     wind_speed: 'fas fa-wind fa-fw',\r\n//     dew_point: 'fal fa-dewpoint fa-fw',\r\n//     visibility: 'far fa-eye fa-fw',\r\n//   };\r\n//   const intersectKeys = (...objects) => {\r\n//     return objects\r\n//       .map((object) => Object.keys(object))\r\n//       .sort((a, b) => a.length - b.length)\r\n//       .reduce((a, b) => a.filter((key) => b.includes(key)));\r\n//   };\r\n//   const conditions = current\r\n//     ? intersectKeys(current, conds).reduce((obj, key) => {\r\n//         return {\r\n//           ...obj,\r\n//           [key]: { data: current[key], iconClass: conds[key] },\r\n//         };\r\n//       }, {})\r\n//     : null;\r\n//   return (\r\n//     <div>\r\n//       {conditions &&\r\n//         Object.keys(conditions).map((condition, index) => {\r\n//           return (\r\n//             <ConditionItem\r\n//               key={index}\r\n//               data={conditions[condition].data}\r\n//               iconClass={conditions[condition].iconClass}\r\n//             />\r\n//           );\r\n//         })}\r\n//     </div>\r\n//   );\r\n// };\r\n","import './WeatherHourly.css';\r\n\r\nexport const HourlyItem = ({ hour }) => {\r\n  const time = new Intl.DateTimeFormat('en-US', {\r\n    hour: 'numeric',\r\n    hour12: true,\r\n  })\r\n    .format(new Date(hour?.dt * 1000))\r\n    .replace(/\\s+/g, '');\r\n  const icon = hour?.weather[0].icon;\r\n  const description = hour?.weather[0].description;\r\n  const temp = hour?.temp;\r\n  return (\r\n    <div className='d-flex flex-column hf__item justify-content-evenly small'>\r\n      <p className='mb-0'>{time}</p>\r\n      <div>\r\n        <img\r\n          className='img-fluid'\r\n          src={`${process.env.PUBLIC_URL}/assets/icons/${icon}.png`}\r\n          alt={description}\r\n        />\r\n      </div>\r\n      <p>{temp}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const HourlyForecast = ({ hourly }) => {\r\n  return (\r\n    <div className='d-flex  hf__items text-center'>\r\n      {hourly &&\r\n        hourly.map((hour, index) => {\r\n          return <HourlyItem key={index} hour={hour} />;\r\n        })}\r\n    </div>\r\n  );\r\n};\r\n","import { ConditionList } from './WeatherCondition';\r\nimport { HourlyForecast } from './WeatherHourly';\r\nimport ChartInst from './ChartInst';\r\nconst Body = ({ current, hourly }) => {\r\n  const temp = current?.temp;\r\n  const feels_like = current?.feels_like;\r\n  const description = current?.weather[0]?.description;\r\n  const icon = current?.weather[0]?.icon;\r\n  return (\r\n    <div className='card-body row g-0 p-4'>\r\n      <div className='text-center d-flex flex-column mb-4'>\r\n        <h4 className='display-4 font-weight-bold'>{temp}</h4>\r\n        <span className='small px-5'> Feels like: {feels_like}</span>\r\n        <span className='small px-5'>{description}</span>\r\n      </div>\r\n      <div className='d-flex align-items-center pb-3'>\r\n        <ConditionList current={current} />\r\n        <div>\r\n          <img\r\n            src={`${process.env.PUBLIC_URL}/assets/icons/${icon}.png`}\r\n            alt={description}\r\n          />\r\n        </div>\r\n      </div>\r\n      <ChartInst hourlyData={hourly?.slice(0, 8)} />\r\n      <HourlyForecast hourly={hourly} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Body;\r\n","export const DailyItem = ({ day }) => {\r\n  const dayofWeek = new Intl.DateTimeFormat('en-US', {\r\n    weekday: 'long',\r\n  }).format(new Date(day.dt * 1000));\r\n  const temp = { min: day.temp.min, max: day.temp.max };\r\n  const icon = day.weather[0].icon;\r\n  const description = day?.weather[0].description;\r\n  return (\r\n    <div className='d-flex align-items-center list-group-item border-0 mb-0'>\r\n      <p className='flex-grow-1 small mb-0'>{dayofWeek}</p>\r\n      <p className='small mb-0'>\r\n        <img\r\n          className='img-fluid w-50'\r\n          src={`${process.env.PUBLIC_URL}/assets/icons/${icon}.png`}\r\n          alt={description}\r\n        />\r\n      </p>\r\n      <p className='small col-2 mb-0'>{temp.max}</p>\r\n      <p className='small col-2 text-muted mb-0'>{temp.min}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const DailyForecast = ({ daily }) => {\r\n  return (\r\n    <div className='list-group collapse' id='collapseContent1'>\r\n      {daily &&\r\n        daily.map((day, index) => {\r\n          return <DailyItem key={index} day={day} />;\r\n        })}\r\n    </div>\r\n  );\r\n};\r\n","import { DailyForecast } from './WeatherDaily';\r\nimport './Footer.css';\r\nconst Footer = ({ daily }) => {\r\n  return (\r\n    <div className='card-footer row g-0 p-4'>\r\n      <DailyForecast daily={daily} />\r\n      <a\r\n        className='btn btn-link link-info p-md-1 my-1'\r\n        data-mdb-toggle='collapse'\r\n        href='#collapseContent1'\r\n        role='button'\r\n        aria-expanded='false'\r\n        aria-controls='collapseContent1'\r\n      >\r\n        <i className='fas fa-chevron-down fa-lg'></i>\r\n        <i className='fas fa-chevron-up fa-lg'></i>\r\n      </a>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import Header from './Header';\r\nimport Body from './Body';\r\nimport Footer from './Footer';\r\nimport { formatData } from '../utils';\r\nimport './WeatherCard.css';\r\nimport { useWeather } from './weather.context';\r\nimport WeatherCardSkeleton from './WeatherCardSkeleton';\r\n\r\nconst WeatherCard = () => {\r\n  const {\r\n    state: { weatherData, units, loading, error },\r\n  } = useWeather();\r\n  const formattedData = formatData(weatherData, units);\r\n  return (\r\n    <>\r\n      {loading ? (\r\n        <WeatherCardSkeleton />\r\n      ) : weatherData.name !== '' && !error ? (\r\n        <div className='card' style={{ borderRadius: '1.25rem' }}>\r\n          <Header\r\n            name={formattedData?.current?.name}\r\n            dateTime={formattedData?.current?.dt}\r\n          />\r\n          <Body\r\n            current={formattedData?.current}\r\n            hourly={formattedData?.hourly}\r\n          />\r\n          <Footer daily={formattedData?.daily} />\r\n        </div>\r\n      ) : (\r\n        <div></div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default WeatherCard;\r\n","const fahrenheitToCelsius = (fahrenheit) => {\r\n  return ((fahrenheit - 32) * 5) / 9;\r\n};\r\n\r\nconst mphToms = (mph) => {\r\n  return mph * 0.44704;\r\n};\r\n\r\nexport const formatData = (data, units) => {\r\n  if (data.current) {\r\n    // const temps = ['temp', 'feels_like', 'dew_point'];\r\n    // const winds = ['wind_speed', 'wind_gust'];\r\n    const unitMapper = {\r\n      temp: units === 'metric' ? '°C' : '°F',\r\n      feels_like: units === 'metric' ? '°C' : '°F',\r\n      pressure: 'hPa',\r\n      humidity: '%',\r\n      dew_point: units === 'metric' ? '°C' : '°F',\r\n      clouds: '%',\r\n      visibility: 'm',\r\n      wind_speed: units === 'metric' ? ' m/s' : ' mph',\r\n      wind_gust: units === 'metric' ? ' m/s' : ' mph',\r\n      wind_deg: '°',\r\n      rain: 'mm',\r\n      snow: 'mm',\r\n    };\r\n    const convTemp = (temp, units) => {\r\n      return (\r\n        temp &&\r\n        (units === 'metric' ? fahrenheitToCelsius(temp) : temp).toFixed()\r\n      );\r\n    };\r\n    const convSpd = (spd, units) => {\r\n      return spd && (units === 'metric' ? mphToms(spd) : spd).toFixed();\r\n    };\r\n    const res = {\r\n      ...data?.current,\r\n      temp: convTemp(data?.current?.temp, units),\r\n      feels_like: convTemp(data?.current?.feels_like, units),\r\n      dew_point: convTemp(data?.current?.dew_point, units),\r\n      wind_speed: convSpd(data?.current?.wind_speed, units),\r\n      wind_gust: convSpd(data?.current?.wind_gust, units),\r\n    };\r\n    return {\r\n      ...data,\r\n      current: Object.keys(res).reduce((acc, key) => {\r\n        acc[key] = key in unitMapper ? res[key] + unitMapper[key] : res[key];\r\n        return acc;\r\n      }, {}),\r\n      daily: data.daily.map((day) => {\r\n        return {\r\n          ...day,\r\n          temp: Object.fromEntries(\r\n            Object.entries(day.temp).map(([k, v]) => [k, convTemp(v, units)])\r\n          ),\r\n        };\r\n      }),\r\n      hourly: data.hourly.map((hour) => {\r\n        return {\r\n          ...hour,\r\n          temp: convTemp(hour.temp, units),\r\n        };\r\n      }),\r\n    };\r\n  }\r\n};\r\n\r\n// const geo_default = {\r\n//   enableHighAccuracy: true,\r\n//   timeout: 10000,\r\n//   maximumAge: 30000,\r\n// };\r\n\r\n// const getLocation = (opts) => {\r\n//   if ('geolocation' in navigator) {\r\n//     opts = opts ? opts : geo_default;\r\n//     return new Promise((resolve, reject) => {\r\n//       navigator.geolocation.getCurrentPosition(\r\n//         (position) => {\r\n//           resolve(position);\r\n//         },\r\n//         (err) => {\r\n//           reject(err);\r\n//         },\r\n//         opts\r\n//       );\r\n//     });\r\n//   } else {\r\n//     let err = new Error('No browser support for geolocatoin');\r\n//     return Promise.reject(err);\r\n//   }\r\n// };\r\n","import React from 'react';\r\nimport { SET_UNITS } from './weather.actions';\r\nimport { useWeather } from './weather.context';\r\nconst UnitToggle = ({ handleImperial, handleMetric }) => {\r\n  const { dispatch } = useWeather();\r\n  return (\r\n    <div className='my-3 d-flex flex-wrap justify-content-center align-items-stretch align-self-stretch'>\r\n      <button\r\n        onClick={() => dispatch({ type: SET_UNITS, payload: 'imperial' })}\r\n        className='btn btn-sm btn-light'\r\n      >\r\n        °F\r\n      </button>\r\n      <button\r\n        onClick={() => dispatch({ type: SET_UNITS, payload: 'metric' })}\r\n        className='btn btn-sm btn-dark'\r\n      >\r\n        °C\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UnitToggle;\r\n","import axios from 'axios';\r\nimport React, { useEffect, useState, useCallback } from 'react';\r\nimport './Autocomplete.css';\r\n\r\nimport { updateWeather, useWeather } from './weather.context';\r\nimport { SET_LOCATION } from './weather.actions';\r\n\r\nexport default function Autocomplete({ changeLatLon }) {\r\n  const [state, setState] = useState({\r\n    suggestionIdx: 0,\r\n    suggestions: [],\r\n    query: '',\r\n  });\r\n\r\n  const { dispatch } = useWeather();\r\n\r\n  const changeCity = (e) => {\r\n    // setSelectedCity(e.name);\r\n    // setSelectedCoord({ lat: e.lat ?? null, lon: e.lon ?? null });\r\n    const query = {\r\n      name: e.name,\r\n      lat: e.lat,\r\n      lon: e.lon,\r\n    };\r\n    dispatch({\r\n      type: SET_LOCATION,\r\n      payload: query,\r\n    });\r\n    updateWeather(query, dispatch, null);\r\n  };\r\n  // const useThrottle = (fn, timer = 1000) => {\r\n  //   const [timeoutId, setTimeoutId] = useState(null);\r\n  //   return (...args) => {\r\n  //     if (timeoutId) {\r\n  //       return;\r\n  //     }\r\n  //     setTimeoutId(\r\n  //       setTimeout(() => {\r\n  //         fn(...args);\r\n  //         console.log('Using throttle', ...args);\r\n  //         clearTimeout(timeoutId);\r\n  //         setTimeoutId(null);\r\n  //       }, timer)\r\n  //     );\r\n  //   };\r\n  // };\r\n\r\n  // const useDebounce = (fn, timer = 1000) => {\r\n  //   const [timeoutId, setTimeoutId] = useState(null);\r\n  //   return (...args) => {\r\n  //     if (timeoutId) {\r\n  //       clearTimeout(timeoutId);\r\n  //       setTimeoutId(null);\r\n  //     }\r\n  //     setTimeoutId(\r\n  //       setTimeout(() => {\r\n  //         fn(...args);\r\n  //         console.log('Using debounce', ...args);\r\n  //         clearTimeout(timeoutId);\r\n  //         setTimeoutId(null);\r\n  //       }, timer)\r\n  //     );\r\n  //   };\r\n  // };\r\n\r\n  // const getSuggestions = (query, token) =>\r\n  //   getData(query, null).then((res) => {\r\n  //     setState({ ...state, suggestions: res });\r\n  //   });\r\n  // const debouncedFn = useDebounce(getSuggestions);\r\n  // const throttledFn = useThrottle(getSuggestions);\r\n  // const memoizedDebounce = useCallback(debouncedFn, [debouncedFn]);\r\n  // const memoizedThrottle = useCallback(throttledFn, [throttledFn]);\r\n\r\n  useEffect(() => {\r\n    const { cancel, token } = axios.CancelToken.source();\r\n    const timeOutId = setTimeout(\r\n      () =>\r\n        getData(state.query, token).then((res) => {\r\n          setState({ ...state, suggestions: res });\r\n        }),\r\n      500\r\n    );\r\n    return () => cancel('No longer latest query') || clearTimeout(timeOutId);\r\n  }, [state.query]);\r\n\r\n  //   useEffect(() => {\r\n  //     const { cancel, token } = axios.CancelToken.source();\r\n  //     const timeOutId = setTimeout(\r\n  //       () => onSuggestionsFetchRequested(state.query),\r\n  //       500\r\n  //     );\r\n  //     return () => cancel('No longer latest query') || clearTimeout(timeOutId);\r\n  //   }, [state.query]);\r\n\r\n  const getData = async (query, cancelToken) => {\r\n    let res = { data: [] };\r\n    if (query) {\r\n      try {\r\n        res = await axios.get(`/api/suggestions?name=${query}`, cancelToken);\r\n        // console.log(res);\r\n      } catch (err) {\r\n        console.error(err);\r\n        axios.isCancel(err);\r\n      }\r\n    }\r\n    return res.data;\r\n  };\r\n\r\n  //   const getSuggestions = async (value, cancelToken) => {\r\n  //     // const inputValue = value.trim().toLowerCase();\r\n  //     const inputLength = value.length;\r\n  //     return inputLength === 0 ? [] : await getData(value, cancelToken); // make api call here\r\n  //   };\r\n\r\n  //   const onSuggestionsFetchRequested = async (value, cancelToken) => {\r\n  //     getSuggestions(value, cancelToken).then((results) => {\r\n  //       setState({ ...state, suggestions: results });\r\n  //     });\r\n  //     // setState({ ...state, suggestions: getSuggestions(value, cancelToken) });\r\n  //   };\r\n\r\n  // const onSuggestionsClearRequested = () => {\r\n  //   setState({ ...state, suggestionIdx: 0, suggestions: [] });\r\n  // };\r\n\r\n  const onSuggestionAccept = () => {\r\n    let selection = state.suggestions[state.suggestionIdx];\r\n    setState({\r\n      ...state,\r\n      query: '',\r\n      suggestionIdx: 0,\r\n      suggestions: [],\r\n    });\r\n  };\r\n\r\n  const onChange = (e) => {\r\n    let q = e.currentTarget.value;\r\n    setState({ ...state, query: q });\r\n    // e.currentTarget.value > 3 ? memoizedDebounce(q) : memoizedThrottle(q);\r\n  };\r\n\r\n  const onClick = (e) => {\r\n    // changeLatLon(e.currentTarget.dataset.item);\r\n    setState({\r\n      suggestionIdx: 0,\r\n      suggestions: [],\r\n      query: '',\r\n    });\r\n    changeCity({\r\n      name: e.currentTarget.dataset.city,\r\n      lat: e.currentTarget.dataset.lat,\r\n      lon: e.currentTarget.dataset.lon,\r\n    });\r\n  };\r\n\r\n  const onKeyDown = (e) => {\r\n    if (e.keyCode === 13) {\r\n      //enter key\r\n      onSuggestionAccept();\r\n    } else if (e.keyCode === 38 && state.suggestionIdx !== 0) {\r\n      setState({ ...state, suggestionIdx: state.suggestionIdx - 1 });\r\n    } else if (\r\n      e.keyCode === 40 &&\r\n      state.suggestionIdx < state.suggestions.length - 1\r\n    ) {\r\n      setState({ ...state, suggestionIdx: state.suggestionIdx + 1 });\r\n    }\r\n  };\r\n\r\n  const SearchBar = ({ onChange, onKeyDown, placeholder, query }) => {\r\n    return (\r\n      <div className='input-group mt-3 rounded'>\r\n        <input\r\n          autoFocus\r\n          type='search'\r\n          value={query}\r\n          autoComplete='off'\r\n          onChange={onChange}\r\n          onKeyDown={onKeyDown}\r\n          id='form1'\r\n          className='form-control'\r\n          placeholder={placeholder}\r\n          aria-label='Search'\r\n        />\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const suggs = state.suggestions;\r\n  return (\r\n    <>\r\n      <SearchBar\r\n        onChange={onChange}\r\n        onKeyDown={onKeyDown}\r\n        placeholder={'City'}\r\n        query={state.query}\r\n      />\r\n      {suggs && (\r\n        <ul className='dropdown-menu scrollable-menu position-static rounded show'>\r\n          {suggs.map((suggestion, index) => {\r\n            return (\r\n              <li\r\n                className='d-flex justify-content-between dropdown-item'\r\n                data-city={suggestion.name}\r\n                data-lat={suggestion.coord.lat}\r\n                data-lon={suggestion.coord.lon}\r\n                key={index}\r\n                onClick={onClick}\r\n              >\r\n                <span>\r\n                  {suggestion.name + ', '}\r\n                  {suggestion.state && suggestion.state + ', '}\r\n                  {suggestion.country + ' '}\r\n                  <img\r\n                    src={`https://openweathermap.org/images/flags/${suggestion.country.toLowerCase()}.png`}\r\n                    alt=''\r\n                  />\r\n                </span>\r\n                <span className='text-muted small'>\r\n                  {suggestion.coord.lat.toFixed(3) +\r\n                    ', ' +\r\n                    suggestion.coord.lon.toFixed(3)}\r\n                </span>\r\n              </li>\r\n            );\r\n          })}\r\n        </ul>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import React, { useState, useRef, useEffect, useReducer } from 'react';\nimport axios from 'axios';\nimport Cities from './components/Cities';\nimport Error from './components/Error';\nimport WeatherCardSkeleton from './components/WeatherCardSkeleton';\nimport WeatherCard from './components/WeatherCard';\nimport './App.css';\nimport UnitToggle from './components/UnitToggle';\nimport Autocomplete from './components/Autocomplete';\nimport initcities from './initCities';\nimport {\n  LOAD_WEATHER,\n  LOAD_WEATHER_ERROR,\n  LOAD_WEATHER_SUCCESS,\n  SET_LOCATION,\n} from './components/weather.actions';\nimport {\n  WeatherProvider,\n  updateWeather,\n  useWeather,\n} from './components/weather.context';\n\n// const initialState = {\n//   lat: null,\n//   lon: null,\n//   name: '',\n//   timezone: '',\n//   timezone_offset: null,\n//   current: null,\n//   hourly: [],\n//   daily: [],\n// };\n\n// function fetchReducer(state, action) {\n//   switch (action.type) {\n//     case 'SEED':\n//       return {\n//         ...state,\n//         weatherData: action.payload,\n//       };\n//     case 'FETCH_START':\n//       return {\n//         ...state,\n//         isLoading: true,\n//         isError: false,\n//       };\n//     case 'FETCH_SUCCESS':\n//       return {\n//         ...state,\n//         weatherData: action.payload,\n//         isLoading: false,\n//         isError: false,\n//       };\n//     case 'FETCH_FAILURE':\n//       return {\n//         ...state,\n//         isLoading: false,\n//         isError: true,\n//       };\n//     case 'RESET':\n//       return {\n//         weatherData: initialState,\n//         isLoading: false,\n//         isError: false,\n//       };\n//     default:\n//       throw new Error();\n//   }\n// }\n\n// async function fetchWeatherData(query, dispatch, cancelToken) {\n//   let res = {};\n//   if (query.name || (query?.coord?.lat && query?.coord?.lon)) {\n//     dispatch({ type: LOAD_WEATHER });\n//     try {\n//       // const cityInfo = await getData(`/weather?q=${query}`, cancelToken);\n//       // // console.log(cityInfo);\n//       // const { lat, lon } = cityInfo.coord;\n//       // const data = await getData(\n//       //   `/onecall?lat=${lat}&lon=${lon}&exclude=minutely,alerts`\n//       // );\n//       // // console.log(data);\n//       // const weatherInfo = data;\n//       // weatherInfo.current.name = cityInfo.name;\n//       const params = {};\n//       if (query.name) {\n//         params.name = query.name;\n//       }\n//       if (query.coord.lat && query.coord.lon) {\n//         params.lat = query.coord.lat;\n//         params.lon = query.coord.lon;\n//       }\n//       res = await axios.get('/api/weather', { params }, cancelToken);\n//       let weatherInfo = res.data;\n//       weatherInfo.current.name = query.name;\n//       weatherInfo.current.sunset = new Date(\n//         weatherInfo.current.sunset * 1000\n//       ).toLocaleTimeString([], { timeStyle: 'short' });\n//       weatherInfo.current.sunrise = new Date(\n//         weatherInfo.current.sunrise * 1000\n//       ).toLocaleTimeString([], { timeStyle: 'short' });\n//       dispatch({ type: LOAD_WEATHER_SUCCESS, payload: weatherInfo });\n//     } catch (err) {\n//       console.error(err);\n//       axios.isCancel(err) || dispatch({ type: LOAD_WEATHER_ERROR });\n//     }\n//   }\n// }\n\nconst App = () => {\n  //state: search->city->api->weather info\n  const cities = initcities.cities;\n\n  // const [selectedCity, setSelectedCity] = useState('');\n  // const [selectedCoord, setSelectedCoord] = useState({ lat: null, lon: null });\n\n  // const [units, setUnits] = useState('imperial');\n\n  // const [{ weatherData, isError, isLoading }, dispatch] = useReducer(\n  //   fetchReducer,\n  //   {\n  //     weatherData: initialState,\n  //     isLoading: false,\n  //     isError: false,\n  //   }\n  // );\n  // const [state, dispatch] = useWeather();\n  // const curData = useRef(state);\n  // useEffect(() => {\n  //   const { cancel, token } = axios.CancelToken.source();\n  //   const timeOutId = setTimeout(() => {\n  //     updateWeather(\n  //       {\n  //         name: curData.selectedCity,\n  //         lat: curData.selectedLat,\n  //         lon: curData.selectedLon,\n  //       },\n  //       dispatch,\n  //       token\n  //     );\n  //   }, 500);\n  //   return () => cancel('No longer latest query') || clearTimeout(timeOutId);\n  // }, [curData.selectedCity]);\n\n  // const onChangeCity = (e) => {\n  //   // setSelectedCity(e.name);\n  //   // setSelectedCoord({ lat: e.lat ?? null, lon: e.lon ?? null });\n  //   dispatch({\n  //     type: SET_LOCATION,\n  //     payload: { name: e.name, lat: e.lat, lon: e.lon },\n  //   });\n  // };\n  // const onSelectCity = (e) => {\n  //   dispatch({\n  //     type: SET_LOCATION,\n  //     payload: { name: e.name, lat: e.lat, lon: e.lon },\n  //   });\n  //   // setSelectedCity(e.name);\n  //   // setSelectedCoord({ lat: e.coord.lat ?? null, lon: e.coord.lon ?? null });\n  // };\n\n  return (\n    <div className='App'>\n      <WeatherProvider>\n        <div className='container py-5 h-100'>\n          <div className='row d-flex justify-content-center align-items-center h-100'>\n            <div className='position-relative col-md-8 col-lg-6 col-xl-4'>\n              <h1 className='text-center'>Weather App</h1>\n              <Autocomplete />\n              <UnitToggle />\n              <Cities cityList={cities} />\n              <Error />\n              <WeatherCard />\n            </div>\n          </div>\n        </div>\n      </WeatherProvider>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}